% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GBest.pbar.R, R/IDBinternal.R, R/MAest.pbar.R,
%   R/PBest_pbar.R, R/PBest_pbarRatio.R, R/Ratio2Size.R, R/SAest.pbar.R,
%   R/addCI.R, R/change10char.R, R/checks.R, R/cool_functions.R,
%   R/cool_spfunctions.R, R/fileexistsnm.R, R/getRefcodes.R, R/getRefobject.R,
%   R/getadjfactorGB.R, R/getadjfactorPLOT.R, R/getfunnm.R, R/getlt10char.R,
%   R/getrhat.R, R/groupStrata.R, R/groupUnits.R, R/internal_description.R,
%   R/pcheck.functions.R, R/raster_analysis.R, R/raster_functions.R,
%   R/save1tab.R, R/save2tabs.R, R/spatial_functions.R, R/strat_collapse.R,
%   R/vector_proc.r, R/write2csv.R, R/write2gdb.R, R/write2sqlite.R,
%   R/write2xlsx.R, R/wtcalc.R, R/wtcalc_unit.R, R/xlsx_functions.R
\name{GBest.pbar}
\alias{GBest.pbar}
\alias{DBvars.default}
\alias{DBgetfn}
\alias{getspconddat}
\alias{getpfromqry}
\alias{getEvalid.ppsa}
\alias{getPlotCur}
\alias{gui_filterdf}
\alias{DBgetbyids}
\alias{MAest.ht}
\alias{MAest.ps}
\alias{MAest.greg}
\alias{MAest.ratio}
\alias{MAest.gregEN}
\alias{MAest}
\alias{MAest.dom}
\alias{MAest.unit}
\alias{PBest.pbar}
\alias{PBest.pbarRatio}
\alias{Ratio2Size}
\alias{SAest.unit}
\alias{SAest.area}
\alias{SAest}
\alias{SAest.dom}
\alias{SAest.large}
\alias{addCI}
\alias{change10char}
\alias{check.numeric}
\alias{check.logic}
\alias{check.matchclass}
\alias{check.matchval}
\alias{getext}
\alias{checkfilenm}
\alias{getoutfn}
\alias{addcommas}
\alias{pastevars}
\alias{stopQ}
\alias{removecols}
\alias{DT_NAto0}
\alias{changeNULL}
\alias{getdups}
\alias{getlistparam}
\alias{getnm}
\alias{checknm}
\alias{check.namedlist}
\alias{capfirst}
\alias{nbrdecimals}
\alias{nbrdigits}
\alias{getfilter}
\alias{filter2qry}
\alias{wraptitle}
\alias{xtabf}
\alias{recodelut}
\alias{findnm}
\alias{chkdbtab}
\alias{strat.pivot}
\alias{makedummy}
\alias{preds.standardize}
\alias{gregEN.select}
\alias{preds.select}
\alias{fileexistsnm}
\alias{getRefcodes}
\alias{getRefobject}
\alias{getadjfactorGB}
\alias{getadjfactorPLOT}
\alias{getfunnm}
\alias{getlt10char}
\alias{getrhat}
\alias{groupEstunit}
\alias{groupStrata}
\alias{groupUnits}
\alias{internal_desciption}
\alias{pcheck.logical}
\alias{pcheck.unique}
\alias{pcheck.varchar}
\alias{pcheck.dsn}
\alias{pcheck.table}
\alias{pcheck.outfolder}
\alias{pcheck.states}
\alias{pcheck.object}
\alias{pcheck.output}
\alias{pcheck.colors}
\alias{pcheck.areaunits}
\alias{pcheck.spatial}
\alias{pcheck.params}
\alias{getGDALDataTypeName}
\alias{getDefaultNodata}
\alias{getOffset}
\alias{getGDALformat}
\alias{basename.NoExt}
\alias{Mode}
\alias{Modes}
\alias{northness}
\alias{eastness}
\alias{roughness}
\alias{TRI}
\alias{TPI}
\alias{getPixelValue}
\alias{.getPixelValue}
\alias{extractPtsFromRaster}
\alias{extractPtsFromRasterList}
\alias{rasterInfo}
\alias{reprojectRaster}
\alias{rasterFromRaster}
\alias{rasterFromVectorExtent}
\alias{rasterizePolygons}
\alias{polygonizeRaster}
\alias{clipRaster}
\alias{rasterCalc}
\alias{rasterCombine}
\alias{recodeRaster}
\alias{pixelCount}
\alias{focalRaster}
\alias{zonalStats}
\alias{zonalMean}
\alias{zonalFreq}
\alias{zonalMajority}
\alias{zonalMinority}
\alias{zonalVariety}
\alias{ptCsvToVRT}
\alias{getrastlst.rgdal}
\alias{areacalc.pixel}
\alias{aspect_transform}
\alias{spPlotRastcl}
\alias{checkrast.longlat}
\alias{save1tab}
\alias{save2tabs}
\alias{polyfix.sf}
\alias{build.prj4str}
\alias{trunc10shp}
\alias{getEPSG}
\alias{check.extents}
\alias{getprjatt}
\alias{areacalc.poly}
\alias{checksf.longlat}
\alias{crsCompare}
\alias{sf_dissolve}
\alias{closest_poly}
\alias{getIntersect}
\alias{clip.othertables}
\alias{strat.collapse}
\alias{ptdata2sf}
\alias{sf2ptdata}
\alias{layerIntersection}
\alias{layerUnion}
\alias{tabulateIntersections}
\alias{selectByIntersects}
\alias{layerFromRasterExtent}
\alias{vectorTranslate}
\alias{write2csv}
\alias{write2gdb}
\alias{write2sqlite}
\alias{write2xlsx}
\alias{wtcalc}
\alias{wtcalc.unit}
\alias{pcheck.xlsx}
\alias{wrapSE}
\alias{setCells}
\title{Internal functions used for development of FIESTA}
\usage{
GBest.pbar(
  sumyn = "CONDPROP_ADJ",
  ysum,
  sumyd = NULL,
  esttype = "AREA",
  ratiotype = "PERACRE",
  stratalut,
  uniqueid,
  unitvar,
  strvar = NULL,
  domain
)

DBvars.default(
  istree,
  isseed,
  isveg,
  isdwm,
  issubp,
  regionVars,
  plotgeom = FALSE,
  regionVarsRS = "RMRS"
)

DBgetfn(
  tab,
  invtype,
  outfn.pre,
  stabbrlst = NULL,
  evalid = NULL,
  qry = FALSE,
  othertxt = NULL,
  outfn.date = FALSE,
  addslash = FALSE,
  ext = "csv",
  outfolder = NULL,
  overwrite = FALSE
)

getspconddat(
  cond = NULL,
  ACTUALcond = NULL,
  cuniqueid = "PLT_CN",
  condid1 = FALSE,
  ACI = FALSE
)

getpfromqry(
  dsn = NULL,
  evalid = NULL,
  plotCur = TRUE,
  varCur = "MEASYEAR",
  Endyr = NULL,
  invyrs = NULL,
  allyrs = FALSE,
  SCHEMA. = NULL,
  subcycle99 = NULL,
  designcd1 = FALSE,
  intensity1 = NULL,
  popSURVEY = FALSE,
  chk = FALSE,
  syntax = "sql",
  plotnm = "plot",
  ppsanm = "pop_plot_stratum_assgn",
  ppsaid = "PLT_CN",
  surveynm = "survey"
)

getEvalid.ppsa(
  ppsa,
  states = NULL,
  evalAll = FALSE,
  evalCur = FALSE,
  evalEndyr = NULL,
  evalType = "VOL"
)

getPlotCur(
  pltx,
  Endyr = NULL,
  varCur = "MEASYEAR",
  Endyr.filter = NULL,
  designcd1 = TRUE
)

gui_filterdf(df, byname = TRUE)

DBgetbyids(dbconn, ids, layernm, layerid = "PLT_CN")

MAest.ht(y, N, FIA = TRUE, getweights = FALSE)

MAest.ps(
  y,
  N,
  x_sample,
  x_pop,
  FIA = TRUE,
  save4testing = TRUE,
  getweights = FALSE
)

MAest.greg(
  y,
  N,
  x_sample,
  x_pop,
  FIA = TRUE,
  save4testing = TRUE,
  modelselect = FALSE,
  getweights = FALSE
)

MAest.ratio(y, N, x_sample, x_pop, FIA = TRUE, save4testing = TRUE)

MAest.gregEN(
  y,
  N,
  x_sample,
  x_pop,
  FIA = TRUE,
  model = "linear",
  save4testing = TRUE,
  getweights = TRUE
)

MAest(
  yn = "CONDPROP_ADJ",
  dat.dom,
  cuniqueid,
  unitlut = NULL,
  pltassgn,
  esttype = "ACRES",
  MAmethod,
  strvar = NULL,
  prednames = NULL,
  yd = NULL,
  ratiotype = "PERACRE",
  N,
  FIA = TRUE,
  modelselect = FALSE,
  getweights = FALSE
)

MAest.dom(
  dom,
  dat,
  cuniqueid,
  unitlut,
  pltassgn,
  esttype,
  MAmethod,
  strvar = NULL,
  prednames = NULL,
  domain,
  N,
  response = NULL,
  FIA = TRUE,
  modelselect = FALSE,
  getweights = FALSE
)

MAest.unit(
  unit,
  dat,
  cuniqueid,
  unitlut,
  unitvar,
  esttype,
  MAmethod = "HT",
  strvar = NULL,
  prednames = NULL,
  domain,
  response,
  npixels,
  FIA = TRUE,
  modelselect = TRUE,
  getweights = FALSE
)

PBest.pbar(
  dom.prop,
  uniqueid,
  domain,
  strtype = "post",
  stratalut,
  strunitvars,
  unitvars,
  strvar
)

PBest.pbarRatio(
  dom.prop.n,
  dom.prop.d,
  uniqueid,
  domain,
  attribute,
  strtype = "post",
  stratalut,
  strunitvars,
  unitvars,
  strvar
)

Ratio2Size(sumyn, ysum, sumyd, uniqueid, stratalut, unitvar, strvar, domain)

SAest.unit(
  fmla.dom.unit,
  pltdat.dom,
  dunitlut.dom,
  yn,
  SApackage,
  dunitvar,
  predselect.unit,
  prior = NULL
)

SAest.area(
  fmla.dom.area,
  pltdat.dom,
  dunitlut.dom,
  cuniqueid,
  dunitvar = "DOMAIN",
  predselect.area,
  yn,
  SApackage,
  prior = NULL
)

SAest(
  yn = "CONDPROP_ADJ",
  dat.dom,
  cuniqueid,
  pltassgn,
  dunitlut,
  prednames = NULL,
  dunitvar = "DOMAIN",
  SAmethod = "unit",
  SApackage = "JoSAE",
  yd = NULL,
  ratiotype = "PERACRE",
  largebnd.val = NULL,
  showsteps = FALSE,
  savesteps = FALSE,
  stepfolder = NULL,
  prior = NULL,
  modelselect = TRUE
)

SAest.dom(
  dom,
  dat,
  cuniqueid,
  dunitlut,
  pltassgn,
  dunitvar = "DOMAIN",
  SApackage,
  SAmethod,
  prednames = NULL,
  domain,
  response = NULL,
  largebnd.val = NULL,
  showsteps = FALSE,
  savesteps = FALSE,
  stepfolder = NULL,
  prior = NULL,
  modelselect = TRUE
)

SAest.large(
  largebnd.val,
  dat,
  cuniqueid,
  largebnd.unique,
  dunitlut,
  dunitvar = "DOMAIN",
  SApackage = "JoSAE",
  SAmethod = "unit",
  domain,
  response,
  prednames = NULL,
  showsteps = FALSE,
  savesteps = FALSE,
  stepfolder = NULL,
  prior = NULL,
  modelselect = TRUE
)

addCI(x, estnm, senm = NULL, conf.level = c(99, 95, 68), gainloss = FALSE)

change10char(xnms)

check.numeric(x)

check.logic(
  x,
  statement,
  filternm = NULL,
  stopifnull = FALSE,
  stopifinvalid = TRUE,
  removeinvalid = FALSE,
  returnvar = FALSE,
  xvect = FALSE
)

check.matchclass(
  tab1,
  tab2,
  matchcol,
  var2 = NULL,
  tab1txt = NULL,
  tab2txt = NULL
)

check.matchval(
  tab1,
  tab2,
  var1,
  var2 = NULL,
  tab1txt = NULL,
  tab2txt = NULL,
  gui = FALSE,
  stopifmiss = FALSE,
  subsetrows = FALSE
)

getext(x)

checkfilenm(fn, outfolder = NULL, ext = NULL, stopifnull = FALSE)

getoutfn(
  outfn,
  outfolder = NULL,
  outfn.pre = NULL,
  outfn.date = FALSE,
  overwrite = FALSE,
  ext = NULL,
  baseonly = FALSE,
  noext = FALSE,
  outfn.default = "outfile",
  add = TRUE,
  append = FALSE,
  gui = FALSE
)

addcommas(vars, ALIAS = NULL, sepchar = ",", quotes = FALSE, paren = FALSE)

pastevars(vars1, vars2, sep = ",")

stopQ()

removecols(x, vars)

DT_NAto0(DT, cols, changeto = 0)

changeNULL(x, xvar, changeto = NULL)

getdups(cx, cuniqueid = "PLT_CN", varnm, fun)

getlistparam(lst)

getnm(xvar, group = FALSE)

checknm(nm, nmlst)

check.namedlist(xlst, checknms = NULL, modetype = "numeric")

capfirst(x, allwords = FALSE)

nbrdecimals(x)

nbrdigits(x)

getfilter(att, val, syntax = "R")

filter2qry(filt, layernm)

wraptitle(x, len = 10)

xtabf(x, y, levels)

recodelut(lut, minvar = "min", maxvar = "max", classvar = "class")

findnm(x, xvect, returnNULL = FALSE)

chkdbtab(dbtablst, tab, stopifnull = FALSE)

getext(x)

getfilter(att, val, syntax = "R")

filter2qry(filt, layernm)

recodelut(lut, minvar = "min", maxvar = "max", classvar = "class")

strat.pivot(x, strvar, unitvars, strwtvar = "Prop", strat.levels = NULL)

makedummy(dat, auxlut, predfac)

preds.standardize(plt, aux, prednames)

gregEN.select(y, x_sample, x_pop, N, alpha = 0.5, returncoef = FALSE)

preds.select(y, plt, aux, prednames)

fileexistsnm(outfolder, basenm, ext)

getRefcodes(xvar)

getRefobject(xvar)

getadjfactorGB(
  condx = NULL,
  treex = NULL,
  seedx = NULL,
  vcondsppx = NULL,
  vcondstrx = NULL,
  tuniqueid = "PLT_CN",
  cuniqueid = "PLT_CN",
  vuniqueid = "PLT_CN",
  condid = "CONDID",
  unitlut = NULL,
  unitvars = NULL,
  strvars = NULL,
  unitarea = NULL,
  areavar = NULL,
  areawt = "CONDPROP_UNADJ",
  cvars2keep = NULL,
  tpropvars = list(SUBP = "SUBPPROP_UNADJ", MICR = "MICRPROP_UNADJ", MACR =
    "MACRPROP_UNADJ")
)

getadjfactorPLOT(
  condx = NULL,
  treex = NULL,
  seedx = NULL,
  cuniqueid = "PLT_CN",
  tuniqueid = "PLT_CN",
  condid = "CONDID",
  checkNA = TRUE,
  areawt = "CONDPROP_UNADJ",
  tpropvars = list(SUBP = "SUBPPROP_UNADJ", MICR = "MICRPROP_UNADJ", MACR =
    "MACRPROP_UNADJ")
)

getfunnm(x)

getlt10char(dbname)

getrhat(x)

groupEstunit(x, minplotnum)

groupStrata(x, minplotnum)

groupUnits(
  tabest,
  domain,
  esttype = "AREA",
  estncol = "estn",
  estncol.var = "estn.var",
  estdcol = "estd",
  estdcol.var = "estd.var",
  covarcol = "covar",
  grpfun = sum,
  domvar2 = NULL,
  rowgrpnm = NULL,
  unitvar = NULL,
  areavar = NULL,
  phototype = "PCT",
  photoratio = FALSE,
  keepvars = NULL
)

pcheck.logical(
  var2check,
  varnm = NULL,
  title = NULL,
  first = "YES",
  gui = FALSE,
  stopifnull = FALSE
)

pcheck.unique(
  tab,
  uniqueid,
  gui = FALSE,
  tabnm = NULL,
  warn = NULL,
  stopifnull = FALSE,
  stopifinvalid = TRUE,
  multiple = FALSE,
  ...
)

pcheck.varchar(
  var2check,
  varnm = NULL,
  checklst,
  gui = FALSE,
  caption = NULL,
  warn = NULL,
  stopifnull = FALSE,
  stopifinvalid = TRUE,
  multiple = FALSE,
  ...
)

pcheck.dsn(dsn, dbconnopen = TRUE)

pcheck.table(
  tab = NULL,
  tab_dsn = NULL,
  tabnm = NULL,
  tabqry = NULL,
  caption = NULL,
  returnsf = TRUE,
  factors = FALSE,
  returnDT = TRUE,
  warn = NULL,
  stopifnull = FALSE,
  nullcheck = FALSE,
  obj = FALSE,
  gui = FALSE
)

pcheck.outfolder(outfolder, default = getwd(), gui = FALSE)

pcheck.states(
  states,
  statereturn = "MEANING",
  gui = FALSE,
  RS = NULL,
  stopifnull = FALSE,
  ...
)

pcheck.object(
  obj = NULL,
  objnm = NULL,
  warn = NULL,
  caption = NULL,
  stopifnull = FALSE,
  gui = FALSE,
  list.items = NULL
)

pcheck.output(
  out_fmt = "csv",
  out_dsn = NULL,
  outfolder = NULL,
  outfn.pre = NULL,
  outfn.date = FALSE,
  overwrite_dsn = FALSE,
  overwrite_layer = TRUE,
  add_layer = TRUE,
  append_layer = FALSE,
  createSQLite = TRUE,
  gui = FALSE
)

pcheck.colors(colorlst, n)

pcheck.areaunits(unitarea, areavar, areaunits, metric = FALSE)

pcheck.spatial(
  layer = NULL,
  dsn = NULL,
  sql = NA,
  fmt = NULL,
  tabnm = NULL,
  caption = NULL,
  stopifnull = FALSE,
  gui = FALSE,
  polyfix = FALSE,
  asSpatial = FALSE,
  dropgeom = FALSE,
  stopifnoCRS = TRUE,
  checkonly = FALSE
)

pcheck.params(
  input.params,
  strata_opts = NULL,
  unit_opts = NULL,
  table_opts = NULL,
  title_opts = NULL,
  savedata_opts = NULL,
  multest_opts = NULL,
  spMakeSpatial_opts = NULL
)

getGDALDataTypeName(GDT_number)

getDefaultNodata(GDT_name)

getOffset(coord, origin, gt_pixel_size)

getGDALformat(file)

basename.NoExt(filepath)

Mode(x, na.rm = FALSE)

Modes(x, na.rm = FALSE)

northness(asp_deg)

eastness(asp_deg)

roughness(x, na.rm = FALSE, asInt = TRUE)

TRI(x, na.rm = FALSE, asInt = TRUE)

TPI(x, na.rm = FALSE, asInt = TRUE)

getPixelValue(
  pt,
  ds,
  band = 1,
  interpolate = FALSE,
  windowsize = 1,
  statistic = NULL,
  na.rm = TRUE
)

.getPixelValue(pt, rasterfile, ds, ...)

extractPtsFromRaster(
  ptdata,
  rasterfile,
  band = NULL,
  var.name = NULL,
  interpolate = FALSE,
  windowsize = 1,
  statistic = NULL,
  na.rm = TRUE,
  ncores = 1
)

extractPtsFromRasterList(
  ptdata,
  rasterfiles,
  bands = NULL,
  var.names = NULL,
  interpolate = FALSE,
  windowsizes = NULL,
  statistics = NULL,
  na.rm = TRUE,
  ncores = 1
)

rasterInfo(srcfile)

reprojectRaster(
  srcfile,
  dstfile,
  t_srs,
  overwrite = TRUE,
  s_srs = NULL,
  of = NULL,
  ot = NULL,
  te = NULL,
  tr = NULL,
  r = NULL,
  dstnodata = NULL,
  co = NULL,
  addOptions = NULL
)

rasterFromRaster(
  srcfile,
  dstfile,
  fmt = NULL,
  nbands = NULL,
  dtName = NULL,
  options = NULL,
  init = NULL,
  dstnodata = init
)

rasterFromVectorExtent(
  src,
  dstfile,
  res,
  fmt = NULL,
  nbands = 1,
  dtName = "Int16",
  options = NULL,
  init = NULL,
  dstnodata = init
)

rasterizePolygons(dsn, layer, burn_value, rasterfile, src = NULL)

polygonizeRaster(rasterfile, maskfile = character(0), options = character(0))

clipRaster(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  srcfile,
  src_band = NULL,
  dstfile,
  fmt = NULL,
  options = NULL,
  init = 0,
  maskByPolygons = TRUE
)

rasterCalc(
  calc,
  rasterfiles,
  bands = NULL,
  var.names = NULL,
  dstfile = tempfile("rastcalc", fileext = ".img"),
  fmt = NULL,
  dtName = "Int16",
  options = NULL,
  nodata_value = NULL,
  setRasterNodataValue = FALSE,
  usePixelLonLat = FALSE
)

rasterCombine(
  rasterfiles,
  var.names = NULL,
  bands = NULL,
  dstfile = NULL,
  fmt = NULL,
  dtName = "UInt32",
  options = NULL
)

recodeRaster(srcfile, dstfile, lut, srcband = 1, ...)

pixelCount(rasterfile)

focalRaster(
  srcfile,
  dstfile,
  w,
  fun = sum,
  na.rm = FALSE,
  ...,
  fmt = NULL,
  dtName = NULL,
  options = NULL,
  nodata_value = NULL,
  setRasterNodataValue = FALSE,
  srcband = NULL
)

zonalStats(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  lut = NULL,
  pixelfun = NULL,
  na.rm = TRUE,
  ignoreValue = NULL,
  resampling = "nearest"
)

zonalMean(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  lut = NULL,
  pixelfun = NULL,
  na.rm = TRUE,
  ...
)

zonalFreq(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  aggfun = NULL,
  lut = NULL,
  na.rm = FALSE,
  ignoreValue = NULL
)

zonalMajority(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  lut = NULL,
  ...
)

zonalMinority(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  lut = NULL,
  ...
)

zonalVariety(
  dsn = NULL,
  layer = NULL,
  src = NULL,
  attribute,
  rasterfile,
  band = 1,
  lut = NULL,
  ...
)

ptCsvToVRT(csvfile, layer_srs, xfield = "Lon", yfield = "Lat", readvrt = TRUE)

getrastlst.rgdal(
  rastnmlst,
  rastfolder = NULL,
  stopifLonLat = FALSE,
  stopifnull = FALSE,
  gui = TRUE,
  quiet = FALSE
)

areacalc.pixel(rastfn, unit = "ACRES", rast.NODATA = NULL, na.rm = TRUE)

aspect_transform(df, asp)

spPlotRastcl(
  rastcl,
  bks = NULL,
  col.bks = NULL,
  col.palette = NULL,
  ext = NULL,
  labels = NULL,
  ...
)

checkrast.longlat(rastfn, dstfile = NULL, nolonglat = TRUE, crs.default = NULL)

save1tab(
  tab,
  tab.title = NULL,
  outfolder,
  allin1 = TRUE,
  coltitlerow = TRUE,
  coltitle = NULL,
  addtitle = TRUE,
  rowtotal = TRUE,
  rnames = NULL,
  outfn = NULL,
  addformat = TRUE,
  charvars = NULL,
  outfn.date = TRUE,
  overwrite = FALSE,
  cols2format = NULL
)

save2tabs(
  tab1,
  tab2,
  tab1.title,
  tab2.title,
  outfolder,
  coltitlerow = TRUE,
  coltitle = NULL,
  addtitle = TRUE,
  rowtotal = TRUE,
  rnames = NULL,
  outfn.estpse = NULL,
  outfn.date = TRUE,
  overwrite = FALSE
)

polyfix.sf(x)

build.prj4str(
  prj,
  datum = NULL,
  ellps = NULL,
  zone = NULL,
  zoneS = FALSE,
  aea.param = "USGS",
  gui = FALSE
)

trunc10shp(x)

getEPSG(prj = NULL, datum = NULL, zone = NULL)

check.extents(
  bbox1,
  bbox2,
  showext = FALSE,
  layer1nm = NULL,
  layer2nm = NULL,
  stopifnotin = FALSE,
  quiet = FALSE
)

getprjatt(prj4str, prjatt, stopifnull = FALSE)

areacalc.poly(
  polyv,
  polyv_dsn = NULL,
  areaprj = "aea",
  zone = NULL,
  unit = "ACRES",
  areavar = NULL
)

checksf.longlat(x, nolonglat = TRUE, crs.default = NULL)

crsCompare(
  x,
  ycrs = NULL,
  x.crs = NULL,
  nolonglat = FALSE,
  checkonly = FALSE,
  crs.default = NULL
)

sf_dissolve(sflayer, col = NULL, areacalc = TRUE)

closest_poly(x.centroid, ypoly, ypoly.att = NULL, nbr = NULL, returnsf = TRUE)

getIntersect(layer1, layer2, layer1.unique, layer2fld, overlapThreshold = 0)

clip.othertables(
  inids,
  othertabnms,
  othertabs = NULL,
  uniqueid = "PLT_CN",
  savedata = FALSE,
  outfn.pre = NULL,
  outfolder = NULL,
  out_fmt = "csv",
  out_dsn = NULL,
  outfn.date = FALSE,
  overwrite = FALSE,
  gui = FALSE
)

strat.collapse(
  stratacnt,
  errtab,
  pltstratx,
  minplotnum.unit = 10,
  minplotnum.strat = 2,
  unitarea,
  areavar,
  unitvar,
  unitvar2 = NULL,
  strvar,
  getwt = FALSE,
  stratcombine = TRUE,
  unitcombine = FALSE,
  vars2combine = NULL
)

ptdata2sf(
  ptdata,
  crs,
  coords = c(2, 3),
  asSpatial = FALSE,
  stringsAsFactors = FALSE
)

sf2ptdata(ptlayer, id_fld = 1, stringsAsFactors = FALSE)

layerIntersection(
  layer1,
  layer2,
  asSpatial = FALSE,
  dropLowerDimGeom = TRUE,
  stringsAsFactors = FALSE
)

layerUnion(
  layer1,
  layer2,
  asSpatial = FALSE,
  dropLowerDimGeom = TRUE,
  sfColName = "geometry",
  stringsAsFactors = FALSE
)

tabulateIntersections(
  layer1,
  layer1fld,
  layer2,
  layer2fld = NULL,
  stringsAsFactors = FALSE,
  withUnits = FALSE
)

selectByIntersects(
  layer1,
  layer2,
  overlapThreshold = 0,
  thresholdAsPct = TRUE,
  asSpatial = FALSE,
  stringsAsFactors = FALSE
)

layerFromRasterExtent(rasterfile, asSpatial = FALSE)

vectorTranslate(
  src_dsn,
  dst_dsn,
  dst_fmt = "ESRI Shapefile",
  src_layer = NULL,
  dst_layer = NULL,
  update = FALSE,
  overwrite = FALSE,
  dsco = NULL,
  lco = NULL,
  nlt = "PROMOTE_TO_MULTI",
  t_srs = NULL,
  addOptions = NULL
)

write2csv(
  layer,
  outfile = NULL,
  outfolder = NULL,
  outfilenm = NULL,
  outfn.pre = NULL,
  outfn.date = FALSE,
  overwrite = FALSE,
  tabtitle = NULL,
  appendfile = FALSE,
  closefn = TRUE,
  outtxt = NULL,
  gui = FALSE
)

write2gdb(layer, gdbfn, out_name = NULL, overwrite = FALSE)

write2sqlite(
  layer,
  SQLitefn,
  out_name = NULL,
  gpkg = FALSE,
  outfolder = NULL,
  overwrite = FALSE,
  append_layer = FALSE,
  createnew = FALSE,
  dbconnopen = FALSE,
  index.unique = NULL,
  index = NULL
)

write2xlsx(
  esttab,
  psetab = NULL,
  wbnm = NULL,
  sheetnm = NULL,
  tabtitle = NULL,
  subtitle = NULL,
  rowgrp = FALSE,
  rowgrp2 = FALSE,
  colgrp = FALSE,
  rowgrpnm = NULL,
  rowgrp2nm = NULL,
  rowgrp.subtot = FALSE,
  rowgrp2.subtot = FALSE,
  subtotvals = NULL,
  colgrp.subtot = FALSE,
  cnames = NULL,
  rowtotal = TRUE,
  coltotal = TRUE,
  rowtottxt = "Total",
  coltottxt = "Total",
  estnm = "Estimate",
  psenm = "Percent Sampling Error",
  title.colvar = NULL,
  title.rowvar = NULL,
  title.fontsize = 12,
  fill = TRUE,
  title.rowgrp = NULL,
  estround = 1,
  pseround = 2,
  allin1 = FALSE,
  addSEcol = FALSE,
  footnote1 = NULL,
  footnote2 = NULL,
  footnote3 = NULL,
  footnote4 = NULL,
  savewb = TRUE,
  cellWidth.grp = 6,
  cellwidth = 11,
  cellwidthSE = NULL,
  psenm.out = "PSE",
  outfn = NULL,
  outfolder = NULL,
  autosize = FALSE
)

wtcalc(wtLUT, strvar, acrevar)

wtcalc.unit(wtLUT, strvar, unit, unitvar, acrevar)

pcheck.xlsx(
  wbnm,
  savewb = TRUE,
  outfn = NULL,
  outfolder = NULL,
  outfn.date = TRUE,
  overwrite = FALSE
)

wrapSE(x)

setCells(
  datsheet,
  estgrp,
  psegrp,
  nbrgrps = 1,
  startrow = 1,
  endrow = NULL,
  subtotal = TRUE,
  totcols,
  estcols,
  psecols,
  esttab.style,
  psetab.style,
  rnames = rnames,
  norname = FALSE,
  allin1 = FALSE,
  addSEcol = FALSE
)
}
\description{
These functions are used internally by developers of the FIESTA and
FIESTAnalysis R packages. They are not meant to be used on their own, or by
users. While some functions may be useful on their own, they will not be
regularly updated, documented, or changed for a particular use.
}
\details{
These functions are not to be called by a user, and are for development
purposes only.
}
\author{
Tracey S. Frescino, Chris Toney, Grayson W. White
}
\keyword{internal}
